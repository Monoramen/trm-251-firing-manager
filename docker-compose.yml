services:
  backend:
    build:
      context: ./bot-hub-backend 
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    environment:
      - APP_PORT=9090
    env_file:
      - ./.env  # Загружаем .env в окружение
    networks:
      - bot-network
    depends_on:
      - database
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
  frontend:
    build:
      context: ./bot-web-ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - API_PROXY_URL=http://backend:9090
      - NEXT_PUBLIC_API_BASE_URL=/api
    env_file:
      - ./.env
    networks:
      - bot-network


  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - database
    networks:
      - bot-network


  database:
    image: postgres
    ports:
      - "5001:5432"
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-personal-bot-hub:/var/lib/postgresql/data
    env_file:
      - ./.env
    networks:
      - bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"   
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - bot-network




volumes:
  postgres-personal-bot-hub:
    name: postgres-personal-bot-hub
  grafana-storage:
    name: grafana-storage
  ai-model-data:
    name: ai-model-data

networks:
  bot-network:
    name: bot-network
    driver: bridge